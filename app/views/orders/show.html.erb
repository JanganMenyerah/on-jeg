<p id="notice"><%= notice %></p>


<%= render "orders/user_template" %>


<div class="col-xs-12">
	<div class="col-xs-4 left">
		<div class="title col-xs-12">
			<h1><b>On The Way</b></h1>
		</div>	

		<div class="setLocation col-xs-12">
          

             <h3>Pick Up Location</h3>
              <p><%= @data[0].pick_up_location %></p>

            <div class="line-separator col-xs-12"></div>
            
             <h3>Destination Location</h3>
             
              <p><%= @data[0].destination_location %></p>

              <h3 id="output"><%= @data[0].cost    %></h3>
              


              
		</div>

	
	</div>

	<div class="col-xs-8 right">
		<div id="map" style="width:100%;height:870px;"></div>
	</div>


</div>


<div class="col-xs-12">
			<h3 class="driverTxt">DRIVER</h3>
		</div>


		<div class="driver col-xs-offset-1 col-xs-10 col-xs-offset-1">
			<div class="col-xs-12 Driver">

				<div class="col-xs-12">
					<label for="name" class="driverName"><h3><%= @data[1].name %></h3></label>
                    <br />
					<label for="phone" class="vehicleName"><h4><%= @data[1].phone_number %></h4></label><br>
					<!--<label for="" class="driverRate"><h4>â˜† 4.3</h4></label>-->
				</div>

				<div class="line-separator col-xs-12"></div>

				<div class="col-xs-12">
					<div class="col-xs-6">
						<button type="submit" class="btn btnCall btn-md btn-block callDriver"><span class="glyphicon glyphicon-earphone" aria-hidden="true"></span>Call Driver</button>
					</div>

					<div class="col-xs-6">
						<button type="submit" class="btn btnMessage btn-md btn-block messageDriver"><span class="glyphicon glyphicon-envelope" aria-hidden="true"></span>Message</button>
					</div>
					
				</div>
			</div>

			<div class="col-xs-offset-3 col-xs-6 col-xs-offset-3 cancelButton">
<%= button_to "CancelOrder", order_path, class: "cancelorder",  data: { confirm: "Are you sure?" }, method: :delete %></p>
            
			</div>
		</div>


<span id="pick_up_temp" style="display:none"><%= @data[0].pick_up_place_id %></span>
<span id="destination_temp" style="display:none"><%= @data[0].destination_place_id %></span>


<script>
      function initMap() {
        var bounds = new google.maps.LatLngBounds;
        var markersArray = [];
var pick_up_temp = $('#pick_up_temp').html();
var destination_temp = $('#destination_temp').html();

        var origin1 = {'placeId': pick_up_temp};
        var destinationA = {'placeId': destination_temp};

        var destinationIcon = 'https://chart.googleapis.com/chart?' +
            'chst=d_map_pin_letter&chld=D|FF0000|000000';
        var originIcon = 'https://chart.googleapis.com/chart?' +
            'chst=d_map_pin_letter&chld=O|FFFF00|000000';
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 55.53, lng: 9.4},
          zoom: 10
        });
        var geocoder = new google.maps.Geocoder;

        var service = new google.maps.DistanceMatrixService;
        service.getDistanceMatrix({
          origins: [origin1],
          destinations: [destinationA],
          travelMode: 'DRIVING',
          unitSystem: google.maps.UnitSystem.METRIC,
          avoidHighways: false,
          avoidTolls: false
        }, function(response, status) {
          if (status !== 'OK') {
            alert('Error was: ' + status);
          } else {
            var originList = response.originAddresses;
            var destinationList = response.destinationAddresses;
            var outputDiv = document.getElementById('output');
            outputDiv.innerHTML = '';
            deleteMarkers(markersArray);

            var showGeocodedAddressOnMap = function(asDestination) {
              var icon = asDestination ? destinationIcon : originIcon;
              return function(results, status) {
                if (status === 'OK') {
                  map.fitBounds(bounds.extend(results[0].geometry.location));
                  markersArray.push(new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location,
                    icon: icon
                  }));
                } else {
                  alert('Geocode was not successful due to: ' + status);
                }
              };
            };

            for (var i = 0; i < originList.length; i++) {
              var results = response.rows[i].elements;
              geocoder.geocode({'address': originList[i]},
                  showGeocodedAddressOnMap(false));
              for (var j = 0; j < results.length; j++) {
                geocoder.geocode({'address': destinationList[j]},
                    showGeocodedAddressOnMap(true));
                var cost = results[j].distance.text;
                var cost = Number(cost.slice(0, cost.length-2))*4000;
                outputDiv.innerHTML += cost;

                $('input[name="order[cost]"]').val(cost);
                
              }
            }
          }
        });
      }

      function deleteMarkers(markersArray) {
        for (var i = 0; i < markersArray.length; i++) {
          markersArray[i].setMap(null);
        }
        markersArray = [];
      }
    </script>
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBWuC3aPv5RIDIv4cmOTOI1x8ngWYmj16Q&callback=initMap">
    </script>

